/**
 *Submitted for verification at snowtrace.io on 2022-01-15
*/

// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.0. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;

interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

interface IwMemo {
    function MEMOTowMEMO(uint256 _amount) external view returns (uint256);

    function wMEMOToMEMO(uint256 _amount) external view returns (uint256);

    function wrap(uint256 _amount) external returns (uint256);

    function unwrap(uint256 _amount) external returns (uint256);
}

interface IStaking {
    function stake(uint256 _amount, address _recipient) external returns (bool);

    function claim(address _recipient) external;

    function unstake(uint256 _amount, bool _trigger) external;
}

interface IRouter01 {
    function factory() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}


contract A {
    address constant wMemo = 0x0da67235dD5787D67955420C84ca1cEcd4E5Bb3b;
    address constant Memo = 0x136Acd46C134E8269052c62A67042D6bDeDde3C9;
    address constant Time = 0xb54f16fB19478766A268F172C9480f8da1a7c9C3;
    address constant MIM = 0x130966628846BFd36ff31a822705796e8cb8C18D;
    address constant staking = 0x4456B87Af11e87E329AB7d7C7A246ed1aC2168B9;
    address constant JOERouter = 0x60aE616a2155Ee3d9A68541Ba4544862310933d4;
    address constant SushiRouter= 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;
    IRouter01 ROUTER = IRouter01(JOERouter);
    address owner;

    constructor() {
        owner = msg.sender;
        IERC20(Memo).approve(wMemo, type(uint256).max);
        IERC20(Memo).approve(staking, type(uint256).max);
        IERC20(Time).approve(JOERouter, type(uint256).max);
        IERC20(Time).approve(staking, type(uint256).max);
    }

    modifier isOwner() {
        require(msg.sender == owner, "err");
        _;
    }

    function TIMETowMEMO(uint256 amount) public view returns (uint256) {
        return IwMemo(wMemo).MEMOTowMEMO(amount);
    }

    function wMEMOToTIME(uint256 amount) public view returns (uint256) {
        return IwMemo(wMemo).wMEMOToMEMO(amount);
    }

    function wMEMOToMIM(uint256 amount) public view returns (uint256, uint256) {
        address[] memory path = new address[](2);
        uint256 path1;
        uint256 path2;
        {
            path[0] = Time;
            path[1] = MIM;
            path1 = ROUTER.getAmountsOut(
                IwMemo(wMemo).wMEMOToMEMO(amount),
                path
            )[1];
        }
        {
            path[0] = wMemo;
            path[1] = MIM;
            path2 = IRouter01(SushiRouter).getAmountsOut(amount, path)[1];
        }
        return (path1, path2);
    }

    function MIMTowMEMO(uint256 amount) public view returns (uint256, uint256) {
        address[] memory path = new address[](2);
        uint256 path1;
        uint256 path2;
        {
            path[0] = MIM;
            path[1] = Time;
            path1 = IwMemo(wMemo).MEMOTowMEMO(
                ROUTER.getAmountsOut(amount, path)[1]
            );
        }
        {
            path[0] = MIM;
            path[1] = wMemo;
            path2 = IRouter01(SushiRouter).getAmountsOut(amount, path)[1];
        }
        return (path1, path2);
    }

    function swapMIMTIMETowMEMO(uint256 amount)
        public
        view
        returns (uint256, uint256)
    {
        uint256 mimTowMemo;
        uint256 wMemoToMim;
        {
            (uint256 path1, uint256 path2) = MIMTowMEMO(amount);
            mimTowMemo = path1 > path2 ? path1 : path2;
        }
        {
            (uint256 path1, uint256 path2) = wMEMOToMIM(mimTowMemo);
            wMemoToMim = path1 > path2 ? path1 : path2;
        }
        return (mimTowMemo, wMemoToMim);
    }

    function wMEMOToTIME() public isOwner {
        IERC20(wMemo).transferFrom(
            msg.sender,
            address(this),
            IERC20(wMemo).balanceOf(msg.sender)
        );
        IwMemo(wMemo).unwrap(IERC20(wMemo).balanceOf(address(this)));
        IStaking(staking).unstake(IERC20(Memo).balanceOf(address(this)), true);
        IERC20(Time).transfer(
            msg.sender,
            IERC20(Time).balanceOf(address(this))
        );
    }

    function TIMETowMEMO() public isOwner {
        IERC20(Time).transferFrom(
            msg.sender,
            address(this),
            IERC20(Time).balanceOf(msg.sender)
        );
        IStaking(staking).stake(
            IERC20(Time).balanceOf(address(this)),
            address(this)
        );
        IStaking(staking).claim(address(this));
        IwMemo(wMemo).wrap(IERC20(Memo).balanceOf(address(this)));
        IERC20(wMemo).transfer(
            msg.sender,
            IERC20(wMemo).balanceOf(address(this))
        );
    }

    function withdrawToken(
        address _token,
        uint256 _amount,
        address _recipient
    ) external isOwner {
        IERC20(_token).transfer(_recipient, _amount);
    }

    function withdrawAvax(address _recipient, uint256 _amount)
        external
        isOwner
    {
        payable(_recipient).transfer(_amount);
    }

    receive() external payable {}
}